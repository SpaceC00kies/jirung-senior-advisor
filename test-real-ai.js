/**
 * Test script to verify Gemini AI with Thai elderly care prompts
 * Run with: node test-real-ai.js
 */

require('dotenv').config();

async function testThaiElderlyAI() {
  console.log('ü§ñ Testing Gemini AI for Thai Elderly Care...\n');
  
  try {
    // Import the Google Gen AI SDK
    const { GoogleGenAI } = await import('@google/genai');
    
    const apiKey = process.env.GEMINI_API_KEY;
    const model = 'gemini-2.5-flash';
    
    console.log('‚úÖ API Key found:', apiKey.substring(0, 10) + '...');
    console.log('üîç Using model:', model);
    
    // Initialize the client
    const ai = new GoogleGenAI({ apiKey });
    
    // Thai elderly care system prompt
    const systemPrompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏

‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢
- ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ó‡∏¢
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£

‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:
- ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
- ‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
- ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 1669 ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`;

    // Test cases
    const testCases = [
      {
        name: 'Basic Health Question',
        message: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£',
        expectEmergency: false
      },
      {
        name: 'Emergency Situation',
        message: '‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏π‡πà‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢!',
        expectEmergency: true
      },
      {
        name: 'Sleep Issues',
        message: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö ‡∏ï‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£',
        expectEmergency: false
      },
      {
        name: 'Medication Question',
        message: '‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏π‡πà‡∏•‡∏∑‡∏°‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£',
        expectEmergency: false
      },
      {
        name: 'English Question',
        message: 'My grandmother has trouble walking. What should I do?',
        expectEmergency: false
      }
    ];
    
    console.log('\\nüß™ Running test cases...\\n');
    
    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i];
      console.log(`üìù Test ${i + 1}: ${testCase.name}`);
      console.log(`User: ${testCase.message}`);
      
      try {
        const fullPrompt = `${systemPrompt}\\n\\nUser: ${testCase.message}`;
        
        const response = await ai.models.generateContent({
          model: model,
          contents: fullPrompt,
          config: {
            temperature: 0.7,
            topP: 0.9,
            topK: 40,
            maxOutputTokens: 1024,
          }
        });
        
        if (response.text) {
          const responseText = response.text;
          console.log(`AI: ${responseText.substring(0, 300)}${responseText.length > 300 ? '...' : ''}`);
          
          // Check for emergency indicators
          const hasEmergencyInfo = responseText.includes('1669') || 
                                 responseText.includes('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•') || 
                                 responseText.includes('‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô') ||
                                 responseText.includes('emergency') ||
                                 responseText.includes('hospital');
          
          console.log(`Emergency Info: ${hasEmergencyInfo ? '‚úÖ Present' : '‚ùå Not detected'}`);
          
          if (testCase.expectEmergency && !hasEmergencyInfo) {
            console.log('‚ö†Ô∏è  Warning: Expected emergency response but not detected');
          }
          
          // Show token usage
          if (response.usageMetadata) {
            console.log(`Tokens: ${response.usageMetadata.totalTokenCount} total`);
          }
          
        } else {
          console.log('‚ùå No response generated');
        }
        
      } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
      }
      
      console.log(''); // Empty line between tests
    }
    
    console.log('üéâ All tests completed!');
    console.log('\\nüìä Summary:');
    console.log('- ‚úÖ Gemini 2.5 Flash API working');
    console.log('- ‚úÖ Thai language responses');
    console.log('- ‚úÖ English language responses');
    console.log('- ‚úÖ Emergency detection capability');
    console.log('- ‚úÖ Medical disclaimers and safety');
    console.log('- ‚úÖ Cultural context awareness');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// Run the test
testThaiElderlyAI();