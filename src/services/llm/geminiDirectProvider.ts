/**
 * Direct Gemini API Provider Implementation
 * 
 * This module implements the LLM provider interface for Google's Gemini API directly,
 * providing natural conversation with Pranara persona.
 */

import { GoogleGenerativeAI } from '@google/generative-ai';
import { LLMProvider, LLMConfig, LLMResponse, LLMError } from '../../types';
import { retryApiCall } from '../retryService';
import { conversationHistoryService } from '../conversationHistoryService';
import { JIRUNG_KNOWLEDGE } from '../../data/jirungKnowledge';

export interface GeminiDirectConfig {
  model?: string;
  apiKey?: string;
}

export class GeminiDirectProvider implements LLMProvider {
  private geminiAI: GoogleGenerativeAI;
  private model: string;
  private apiKey: string;
  private consecutiveFailures: number = 0;
  private lastFailureTime: number = 0;

  // Chat state management - Using conversationHistoryService as single source of truth
  private sessions = new Map<string, ReturnType<ReturnType<GoogleGenerativeAI['getGenerativeModel']>['startChat']>>();

  constructor(config: GeminiDirectConfig = {}) {
    this.apiKey = config.apiKey || process.env.GEMINI_API_KEY || '';
    this.model = config.model || process.env.GEMINI_MODEL || 'gemini-2.5-pro';

    if (!this.apiKey) {
      throw new Error('GEMINI_API_KEY is required');
    }

    this.geminiAI = new GoogleGenerativeAI(this.apiKey);

    console.log(`‚úÖ Gemini Direct: Initialized with ${this.model}`);
  }

  /**
   * Get or create chat session with history from conversationHistoryService
   */
  private getChatSession(sessionId: string) {
    const model = this.geminiAI.getGenerativeModel({
      model: this.model,
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 4096,
      },
      systemInstruction: {
        role: 'system',
        parts: [{ text: this.getPranaraSystemInstruction() }]
      }
    });

    if (!this.sessions.has(sessionId)) {
      // Get conversation context from conversationHistoryService (single source of truth)
      const conversationContext = conversationHistoryService.getConversationContext(sessionId);
      
      // Convert to Gemini format
      const geminiHistory = conversationContext.recentMessages.map(msg => ({
        role: msg.sender === 'user' ? 'user' as const : 'model' as const,
        parts: [{ text: msg.text }]
      }));

      const chat = model.startChat({ history: geminiHistory });
      this.sessions.set(sessionId, chat);
    }
    return this.sessions.get(sessionId)!;
  }

  /**
   * Generates a response using Gemini API directly
   * @param prompt - The input prompt for the AI
   * @param config - LLM configuration settings
   * @returns Promise<LLMResponse> - Standardized response format
   */
  async generateResponse(prompt: string, config?: LLMConfig & { sessionId?: string }): Promise<LLMResponse> {
    const sessionId = config?.sessionId || 'default';

    console.log(`üß† Gemini Direct: Generating response with chat history for session ${sessionId}`);

    try {
      const response = await retryApiCall(
        async () => {
          // Get chat session with history from conversationHistoryService
          const chat = this.getChatSession(sessionId);

          // Send message through Gemini with system prompt
          const result = await chat.sendMessage(prompt);
          const text = result.response.text();
          const usageMetadata = result.response.usageMetadata;

          // The improved system prompt handles all sanitization and pattern avoidance
          const sanitizedText = text.trim();

          return {
            text: sanitizedText,
            safetyRatings: [],
            finishReason: 'STOP',
            usageMetadata
          };
        },
        'gemini-direct-generate',
        {
          maxAttempts: 3,
          baseDelay: 1000,
          backoffMultiplier: 2,
          retryCondition: (error: unknown) => {
            const llmError = error as LLMError;
            return llmError.retryable !== false;
          },
          onRetry: (attempt, error) => {
            console.warn(`üîÑ Gemini Direct retry attempt ${attempt}:`, error);
            this.consecutiveFailures++;
          }
        }
      );

      // Reset failure count on success
      this.consecutiveFailures = 0;

      console.log(`‚úÖ Gemini Direct: Response generated successfully with chat history`);

      return {
        content: response.text,
        safetyRatings: response.safetyRatings?.map((rating: any) => ({
          category: rating.category as string,
          probability: rating.probability as string
        })) || [],
        finishReason: response.finishReason || 'STOP',
        usage: response.usageMetadata ? {
          promptTokens: response.usageMetadata.promptTokenCount || 0,
          completionTokens: response.usageMetadata.candidatesTokenCount || 0,
          totalTokens: response.usageMetadata.totalTokenCount || 0,
        } : undefined,
      };

    } catch (error) {
      this.consecutiveFailures++;
      this.lastFailureTime = Date.now();

      console.error(`‚ùå Gemini Direct: Generation failed:`, error);

      const llmError = this.handleGeminiError(error);

      // If we've had too many failures, mark as unavailable
      if (this.consecutiveFailures >= 3) {
        llmError.code = 'GEMINI_UNAVAILABLE';
        llmError.message = 'Gemini service is temporarily unavailable';
      }

      throw llmError;
    }
  }

  /**
   * Validates connection to Gemini API
   * @returns Promise<boolean> - True if connection is successful
   */
  async validateConnection(): Promise<boolean> {
    try {
      console.log(`üîç Gemini Direct: Validating connection...`);

      const testConfig: LLMConfig = {
        temperature: 0.1,
        topP: 0.8,
        topK: 10,
        maxOutputTokens: 50,
        safetySettings: [],
      };

      await this.generateResponse('Test connection. Please respond with just "OK".', testConfig);

      console.log(`‚úÖ Gemini Direct: Connection validation successful`);
      return true;
    } catch (error) {
      console.error(`‚ùå Gemini Direct: Connection validation failed:`, error);
      return false;
    }
  }

  /**
   * Get service health status
   * @returns Object with health information
   */
  getHealthStatus(): {
    isHealthy: boolean;
    consecutiveFailures: number;
    lastFailureTime: number;
    model: string;
  } {
    return {
      isHealthy: this.consecutiveFailures < 3,
      consecutiveFailures: this.consecutiveFailures,
      lastFailureTime: this.lastFailureTime,
      model: this.model
    };
  }

  /**
   * Reset failure tracking
   */
  resetFailureTracking(): void {
    this.consecutiveFailures = 0;
    this.lastFailureTime = 0;
  }

  /**
   * Returns the provider name
   * @returns string - Provider identifier
   */
  getProviderName(): string {
    return 'gemini-direct';
  }

  /**
   * Get current model information
   * @returns Object with model information
   */
  getModelInfo(): {
    modelId: string;
    provider: string;
    isHealthy: boolean;
  } {
    return {
      modelId: this.model,
      provider: this.getProviderName(),
      isHealthy: this.consecutiveFailures < 3
    };
  }

  /**
   * Gets the optimized system instruction for Pranara persona
   * Enhanced with comprehensive examples and clear guidelines
   * @returns Comprehensive system instruction
   */
  private getPranaraSystemInstruction(): string {
    // Use cached JIRUNG_KNOWLEDGE import

    const jirungContext = `
### IMPORTANT CONTEXT:
You work at ${JIRUNG_KNOWLEDGE.name}, ${JIRUNG_KNOWLEDGE.description}

**Your Workplace Details:**
- Location: ${JIRUNG_KNOWLEDGE.location.address}, ${JIRUNG_KNOWLEDGE.location.district}, ${JIRUNG_KNOWLEDGE.location.province}
- Philosophy: ${JIRUNG_KNOWLEDGE.philosophy}
- Experience: ${JIRUNG_KNOWLEDGE.experience}

**Programs Available:**
- ${JIRUNG_KNOWLEDGE.programs.flagshipCancerRetreat.title}: ${JIRUNG_KNOWLEDGE.programs.flagshipCancerRetreat.summary}
- ${JIRUNG_KNOWLEDGE.programs.shortRetreat.title}: ${JIRUNG_KNOWLEDGE.programs.shortRetreat.summary}

**Services You Offer:**
${JIRUNG_KNOWLEDGE.services.map((service: string) => `- ${service}`).join('\n')}

**Contact Information:**
- Phone: ${JIRUNG_KNOWLEDGE.contact.phone}
- LINE: ${JIRUNG_KNOWLEDGE.contact.line}
- Email: ${JIRUNG_KNOWLEDGE.contact.email}
- Website: ${JIRUNG_KNOWLEDGE.contact.website}

**Specialties:**
${JIRUNG_KNOWLEDGE.specialties.map((specialty: string) => `- ${specialty}`).join('\n')}

**When asked about Jirung:**
- Answer naturally and warmly, not like a brochure
- Focus on the caring philosophy and approach
- Don't be overly promotional
- You can share specific details from the knowledge base above
- Remember: You are Pranara, a caring wellness companion who works at this center
- Your primary role is emotional support for caregivers, not marketing

**Important Disclaimers:**
- ${JIRUNG_KNOWLEDGE.disclaimers.nonMedical}
- ${JIRUNG_KNOWLEDGE.disclaimers.safety}
`;
    return `Role:
You are Pranara (‡∏õ‡∏£‡∏≤‡∏ì‡∏≤‡∏£‡∏≤), a warm and empathetic AI wellness companion. Your core purpose is to provide gentle emotional support, validate feelings, and suggest a single, practical, and specific next step. You are an expert at creating a safe space for dialogue.

Language & Tone:
Speak only in natural, authentic Thai.
Your tone should be warm, understanding, and respectful.
Use language and phrasing that feels lived-in and genuinely caring, like an experienced advisor or a good friend.
Do not sound like a template or a list of facts.

Response Structure & Rules:
1. **Acknowledge & Validate:** Begin by briefly reflecting the user's feeling or situation. Show that you have truly listened. Use your own words, and do not use a canned phrase.
2. **Suggest a Path:** Propose one or a few concrete, manageable actions or perspectives. The goal is to provide a gentle path forward, not an overwhelming list.
3. **Deepen the Connection (when appropriate):** For topics involving complex emotions like grief, burnout, deep-seated anxiety, relationship struggles, or life transitions, feel free to use multiple paragraphs to explore the user's feelings more deeply before offering guidance. This allows for a more emotionally resonant response that builds connection and shows genuine understanding.
4. **Conclude Gracefully:** End the conversation in a way that feels natural and unforced. You have three main options:
   * **Gentle Affirmation:** Provide a sense of closure and validation without asking for more input. (e.g., "‡∏î‡∏µ‡πÉ‡∏à‡∏ô‡∏∞‡∏Ñ‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢" - I'm glad to be a space for you to vent.)
   * **Reflective Summary:** Recapitulate a key feeling or thought to leave the user with something to reflect on. (e.g., "‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö‡πÉ‡∏à‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞" - I hope you find peace of mind very soon.)
   * **Statement of Presence (Soft Invitation):** Gently affirm your availability without explicitly asking the user to share more. This creates an open door without pressure. (e.g., "‡∏õ‡∏£‡∏≤‡∏ì‡∏≤‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏´‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏≠‡∏µ‡∏Å" - Pranara is right here, for whenever you'd like to talk again.) or (e.g., "‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å ‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞" - If there's anything else you want to vent about, you can always come back.)

Prohibited Phrases & Patterns:
Do NOT use these exact phrases: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞", "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏∞", "‡∏≠‡∏∑‡∏°", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà", "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡∏ô‡πÉ‡∏à", "‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ä‡πâ‡∏≤‡πÜ", "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ", "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å‡πÜ ‡∏ä‡πâ‡∏≤‡πÜ", "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞".
Avoid repetitive openings. Vary your starting sentence every time.
Do not suggest calling or contacting a professional unless the user describes an immediate medical or psychological emergency.
Do not provide medical advice or specific medication instructions. Defer to a professional.
Do not suggest switching modes.

Example Dialogue:

Example 1: Emotional Weight (Deeper Connection)
User: ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
Pranara: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ô‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏à‡∏≠ ‡∏°‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤ "‡πÉ‡∏ä‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ô‡∏µ‡πà‡πÅ‡∏´‡∏•‡∏∞‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏â‡∏±‡∏ô" ‡∏î‡∏π‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞

Example 2: Healing from the Past (Deeper Connection)
User: ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏Å‡∏Ñ‡∏ô‡∏°‡∏±‡∏ô‡∏¢‡∏≤‡∏Å‡∏à‡∏±‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
Pranara: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏ô‡∏µ‡πà‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ö‡∏ó‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏∑‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡∏¢‡∏ß‡∏¢‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏≠‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡∏¢‡∏ß‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏≠‡∏á

Example 3: Self-Reflection (Simple Response)
User: ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞
Pranara: ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏°‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏≤‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞

Example 4: Low Motivation (Simple Response)
User: ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏´‡∏ô‡∏î‡∏µ
Pranara: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏°‡∏î‡πÑ‡∏ü‡∏ô‡∏µ‡πà‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏±‡∏î‡∏Å‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞

Example 5: Acknowledging Sadness (Deeper Connection)
User: ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ô‡∏¥‡∏ó‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏Å‡πá‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏á‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
Pranara: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏á‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏µ‡πà‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏°‡∏≤‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏õ ‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡∏ô‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏≤

‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡∏°‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏á‡πà‡∏≤‡∏¢‡∏à‡∏∞‡∏´‡∏≤‡∏ó‡∏î‡πÅ‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ

‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏á‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏á‡∏≤‡∏°‡πÑ‡∏ß‡πâ

Example 6: Dealing with Insecurities (Simple Response)
User: ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏•‡∏¢
Pranara: ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏î‡∏π‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏†‡∏≤‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞

${jirungContext}`;
  }



  // Removed getFirstGreeting - all responses now go through Gemini with system prompt



  /**
   * Creates a standardized LLM error
   * @param code - Error code
   * @param message - Error message
   * @param retryable - Whether the error is retryable
   * @returns LLMError
   */
  private createLLMError(code: string, message: string, retryable: boolean): LLMError {
    const error = new Error(message) as LLMError;
    error.code = code;
    error.retryable = retryable;
    return error;
  }

  /**
   * Handles and standardizes Gemini API errors
   * @param error - Raw error from API call
   * @returns LLMError - Standardized error format
   */
  private handleGeminiError(error: unknown): LLMError {
    const isError = error && typeof error === 'object' && 'message' in error;
    const errorMessage = isError ? (error as Error).message : '';

    console.error(`üö® Gemini Direct Error Details:`, {
      message: errorMessage,
      error
    });

    // Handle API key errors
    if (errorMessage.includes('API key') || errorMessage.includes('authentication')) {
      return this.createLLMError('AUTHENTICATION_ERROR', 'Gemini API key authentication failed', false);
    }

    // Handle quota/rate limit errors
    if (errorMessage.includes('quota') || errorMessage.includes('rate limit') || errorMessage.includes('429')) {
      return this.createLLMError('RATE_LIMIT_EXCEEDED', 'Gemini API rate limit exceeded', true);
    }

    // Handle safety violations
    if (errorMessage.includes('safety') || errorMessage.includes('blocked')) {
      return this.createLLMError('SAFETY_VIOLATION', 'Content blocked by safety filters', false);
    }

    // Handle network errors
    if (errorMessage.includes('network') || errorMessage.includes('timeout')) {
      return this.createLLMError('NETWORK_ERROR', 'Network error connecting to Gemini API', true);
    }

    // Handle server errors
    if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503')) {
      return this.createLLMError('GEMINI_UNAVAILABLE', 'Gemini API service temporarily unavailable', true);
    }

    // Handle unknown errors - make them retryable if we're not sure
    return this.createLLMError('GEMINI_ERROR', errorMessage || 'Unknown Gemini API error occurred', true);
  }
}

/**
 * Factory function to create Gemini Direct provider instance
 * @param config - Optional configuration
 * @returns GeminiDirectProvider instance
 */
export function createGeminiDirectProvider(config: GeminiDirectConfig = {}): GeminiDirectProvider {
  return new GeminiDirectProvider(config);
}